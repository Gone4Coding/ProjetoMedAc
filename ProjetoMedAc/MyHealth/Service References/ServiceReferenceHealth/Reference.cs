//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyHealth.ServiceReferenceHealth {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeartRate", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class HeartRate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientSNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientSNS {
            get {
                return this.PatientSNSField;
            }
            set {
                if ((this.PatientSNSField.Equals(value) != true)) {
                    this.PatientSNSField = value;
                    this.RaisePropertyChanged("PatientSNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OxygenSaturation", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class OxygenSaturation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientSNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SaturationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientSNS {
            get {
                return this.PatientSNSField;
            }
            set {
                if ((this.PatientSNSField.Equals(value) != true)) {
                    this.PatientSNSField = value;
                    this.RaisePropertyChanged("PatientSNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Saturation {
            get {
                return this.SaturationField;
            }
            set {
                if ((this.SaturationField.Equals(value) != true)) {
                    this.SaturationField = value;
                    this.RaisePropertyChanged("Saturation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BloodPressure", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class BloodPressure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DiastolicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientSNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SystolicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Diastolic {
            get {
                return this.DiastolicField;
            }
            set {
                if ((this.DiastolicField.Equals(value) != true)) {
                    this.DiastolicField = value;
                    this.RaisePropertyChanged("Diastolic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientSNS {
            get {
                return this.PatientSNSField;
            }
            set {
                if ((this.PatientSNSField.Equals(value) != true)) {
                    this.PatientSNSField = value;
                    this.RaisePropertyChanged("PatientSNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Systolic {
            get {
                return this.SystolicField;
            }
            set {
                if ((this.SystolicField.Equals(value) != true)) {
                    this.SystolicField = value;
                    this.RaisePropertyChanged("Systolic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AtivoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmergencyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmergencyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmergencyNumberCountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NifField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneCountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adress {
            get {
                return this.AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressField, value) != true)) {
                    this.AdressField = value;
                    this.RaisePropertyChanged("Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alergies {
            get {
                return this.AlergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.AlergiesField, value) != true)) {
                    this.AlergiesField = value;
                    this.RaisePropertyChanged("Alergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Ativo {
            get {
                return this.AtivoField;
            }
            set {
                if ((this.AtivoField.Equals(value) != true)) {
                    this.AtivoField = value;
                    this.RaisePropertyChanged("Ativo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmergencyName {
            get {
                return this.EmergencyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmergencyNameField, value) != true)) {
                    this.EmergencyNameField = value;
                    this.RaisePropertyChanged("EmergencyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmergencyNumber {
            get {
                return this.EmergencyNumberField;
            }
            set {
                if ((this.EmergencyNumberField.Equals(value) != true)) {
                    this.EmergencyNumberField = value;
                    this.RaisePropertyChanged("EmergencyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmergencyNumberCountryCode {
            get {
                return this.EmergencyNumberCountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmergencyNumberCountryCodeField, value) != true)) {
                    this.EmergencyNumberCountryCodeField = value;
                    this.RaisePropertyChanged("EmergencyNumberCountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Nif {
            get {
                return this.NifField;
            }
            set {
                if ((this.NifField.Equals(value) != true)) {
                    this.NifField = value;
                    this.RaisePropertyChanged("Nif");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((this.PhoneField.Equals(value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneCountryCode {
            get {
                return this.PhoneCountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneCountryCodeField, value) != true)) {
                    this.PhoneCountryCodeField = value;
                    this.RaisePropertyChanged("PhoneCountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sns {
            get {
                return this.SnsField;
            }
            set {
                if ((this.SnsField.Equals(value) != true)) {
                    this.SnsField = value;
                    this.RaisePropertyChanged("Sns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlertType", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class AlertType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaximumCriticalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaximumValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimumCriticalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimumValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaximumCriticalValue {
            get {
                return this.MaximumCriticalValueField;
            }
            set {
                if ((this.MaximumCriticalValueField.Equals(value) != true)) {
                    this.MaximumCriticalValueField = value;
                    this.RaisePropertyChanged("MaximumCriticalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaximumValue {
            get {
                return this.MaximumValueField;
            }
            set {
                if ((this.MaximumValueField.Equals(value) != true)) {
                    this.MaximumValueField = value;
                    this.RaisePropertyChanged("MaximumValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumCriticalValue {
            get {
                return this.MinimumCriticalValueField;
            }
            set {
                if ((this.MinimumCriticalValueField.Equals(value) != true)) {
                    this.MinimumCriticalValueField = value;
                    this.RaisePropertyChanged("MinimumCriticalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumValue {
            get {
                return this.MinimumValueField;
            }
            set {
                if ((this.MinimumValueField.Equals(value) != true)) {
                    this.MinimumValueField = value;
                    this.RaisePropertyChanged("MinimumValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventType", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayerNew")]
    [System.SerializableAttribute()]
    public partial class EventType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaximumTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimumTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaximumTime {
            get {
                return this.MaximumTimeField;
            }
            set {
                if ((this.MaximumTimeField.Equals(value) != true)) {
                    this.MaximumTimeField = value;
                    this.RaisePropertyChanged("MaximumTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumTime {
            get {
                return this.MinimumTimeField;
            }
            set {
                if ((this.MinimumTimeField.Equals(value) != true)) {
                    this.MinimumTimeField = value;
                    this.RaisePropertyChanged("MinimumTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceHealth.IServiceHealth")]
    public interface IServiceHealth {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/TestConnection", ReplyAction="http://tempuri.org/IServiceHealth/TestConnectionResponse")]
        bool TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/TestConnection", ReplyAction="http://tempuri.org/IServiceHealth/TestConnectionResponse")]
        System.Threading.Tasks.Task<bool> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/ValidatePatient", ReplyAction="http://tempuri.org/IServiceHealth/ValidatePatientResponse")]
        bool ValidatePatient(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/ValidatePatient", ReplyAction="http://tempuri.org/IServiceHealth/ValidatePatientResponse")]
        System.Threading.Tasks.Task<bool> ValidatePatientAsync(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertHeartRateRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertHeartRateRecordResponse")]
        bool InsertHeartRateRecord(MyHealth.ServiceReferenceHealth.HeartRate heartRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertHeartRateRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertHeartRateRecordResponse")]
        System.Threading.Tasks.Task<bool> InsertHeartRateRecordAsync(MyHealth.ServiceReferenceHealth.HeartRate heartRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertOxygenSaturationRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertOxygenSaturationRecordResponse")]
        bool InsertOxygenSaturationRecord(MyHealth.ServiceReferenceHealth.OxygenSaturation saturation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertOxygenSaturationRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertOxygenSaturationRecordResponse")]
        System.Threading.Tasks.Task<bool> InsertOxygenSaturationRecordAsync(MyHealth.ServiceReferenceHealth.OxygenSaturation saturation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertBloodPressureRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertBloodPressureRecordResponse")]
        bool InsertBloodPressureRecord(MyHealth.ServiceReferenceHealth.BloodPressure bloodPressure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealth/InsertBloodPressureRecord", ReplyAction="http://tempuri.org/IServiceHealth/InsertBloodPressureRecordResponse")]
        System.Threading.Tasks.Task<bool> InsertBloodPressureRecordAsync(MyHealth.ServiceReferenceHealth.BloodPressure bloodPressure);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceHealthChannel : MyHealth.ServiceReferenceHealth.IServiceHealth, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceHealthClient : System.ServiceModel.ClientBase<MyHealth.ServiceReferenceHealth.IServiceHealth>, MyHealth.ServiceReferenceHealth.IServiceHealth {
        
        public ServiceHealthClient() {
        }
        
        public ServiceHealthClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceHealthClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHealthClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHealthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<bool> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public bool ValidatePatient(int sns) {
            return base.Channel.ValidatePatient(sns);
        }
        
        public System.Threading.Tasks.Task<bool> ValidatePatientAsync(int sns) {
            return base.Channel.ValidatePatientAsync(sns);
        }
        
        public bool InsertHeartRateRecord(MyHealth.ServiceReferenceHealth.HeartRate heartRate) {
            return base.Channel.InsertHeartRateRecord(heartRate);
        }
        
        public System.Threading.Tasks.Task<bool> InsertHeartRateRecordAsync(MyHealth.ServiceReferenceHealth.HeartRate heartRate) {
            return base.Channel.InsertHeartRateRecordAsync(heartRate);
        }
        
        public bool InsertOxygenSaturationRecord(MyHealth.ServiceReferenceHealth.OxygenSaturation saturation) {
            return base.Channel.InsertOxygenSaturationRecord(saturation);
        }
        
        public System.Threading.Tasks.Task<bool> InsertOxygenSaturationRecordAsync(MyHealth.ServiceReferenceHealth.OxygenSaturation saturation) {
            return base.Channel.InsertOxygenSaturationRecordAsync(saturation);
        }
        
        public bool InsertBloodPressureRecord(MyHealth.ServiceReferenceHealth.BloodPressure bloodPressure) {
            return base.Channel.InsertBloodPressureRecord(bloodPressure);
        }
        
        public System.Threading.Tasks.Task<bool> InsertBloodPressureRecordAsync(MyHealth.ServiceReferenceHealth.BloodPressure bloodPressure) {
            return base.Channel.InsertBloodPressureRecordAsync(bloodPressure);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceHealth.IServiceHealthAlert")]
    public interface IServiceHealthAlert {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertPatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertPatientResponse")]
        bool InsertPatient(MyHealth.ServiceReferenceHealth.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertPatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertPatientResponse")]
        System.Threading.Tasks.Task<bool> InsertPatientAsync(MyHealth.ServiceReferenceHealth.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdatePatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdatePatientResponse")]
        bool UpdatePatient(MyHealth.ServiceReferenceHealth.Patient patient, int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdatePatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(MyHealth.ServiceReferenceHealth.Patient patient, int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateStatePatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateStatePatientResponse")]
        bool UpdateStatePatient(MyHealth.ServiceReferenceHealth.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateStatePatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateStatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdateStatePatientAsync(MyHealth.ServiceReferenceHealth.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetPatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetPatientResponse")]
        MyHealth.ServiceReferenceHealth.Patient GetPatient(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetPatient", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetPatientResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.Patient> GetPatientAsync(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetPatientList", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetPatientListResponse")]
        MyHealth.ServiceReferenceHealth.Patient[] GetPatientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetPatientList", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetPatientListResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.Patient[]> GetPatientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/HeartRateList", ReplyAction="http://tempuri.org/IServiceHealthAlert/HeartRateListResponse")]
        MyHealth.ServiceReferenceHealth.HeartRate[] HeartRateList(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/HeartRateList", ReplyAction="http://tempuri.org/IServiceHealthAlert/HeartRateListResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.HeartRate[]> HeartRateListAsync(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/OxygenSaturationList", ReplyAction="http://tempuri.org/IServiceHealthAlert/OxygenSaturationListResponse")]
        MyHealth.ServiceReferenceHealth.OxygenSaturation[] OxygenSaturationList(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/OxygenSaturationList", ReplyAction="http://tempuri.org/IServiceHealthAlert/OxygenSaturationListResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.OxygenSaturation[]> OxygenSaturationListAsync(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/BloodPressureList", ReplyAction="http://tempuri.org/IServiceHealthAlert/BloodPressureListResponse")]
        MyHealth.ServiceReferenceHealth.BloodPressure[] BloodPressureList(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/BloodPressureList", ReplyAction="http://tempuri.org/IServiceHealthAlert/BloodPressureListResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.BloodPressure[]> BloodPressureListAsync(int sns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetAlertResponse")]
        MyHealth.ServiceReferenceHealth.AlertType GetAlert(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetAlertResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.AlertType> GetAlertAsync(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetAlertList", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetAlertListResponse")]
        MyHealth.ServiceReferenceHealth.AlertType[] GetAlertList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/GetAlertList", ReplyAction="http://tempuri.org/IServiceHealthAlert/GetAlertListResponse")]
        System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.AlertType[]> GetAlertListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertAlertResponse")]
        bool InsertAlert(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertAlertResponse")]
        System.Threading.Tasks.Task<bool> InsertAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateAlertResponse")]
        bool UpdateAlert(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateAlertResponse")]
        System.Threading.Tasks.Task<bool> UpdateAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/DeleteAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/DeleteAlertResponse")]
        bool DeleteAlert(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/DeleteAlert", ReplyAction="http://tempuri.org/IServiceHealthAlert/DeleteAlertResponse")]
        System.Threading.Tasks.Task<bool> DeleteAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertEventResponse")]
        bool InsertEvent(MyHealth.ServiceReferenceHealth.EventType eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/InsertEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/InsertEventResponse")]
        System.Threading.Tasks.Task<bool> InsertEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateEventResponse")]
        bool UpdateEvent(MyHealth.ServiceReferenceHealth.EventType eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/UpdateEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/UpdateEventResponse")]
        System.Threading.Tasks.Task<bool> UpdateEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/DeleteEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/DeleteEventResponse")]
        bool DeleteEvent(MyHealth.ServiceReferenceHealth.EventType eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHealthAlert/DeleteEvent", ReplyAction="http://tempuri.org/IServiceHealthAlert/DeleteEventResponse")]
        System.Threading.Tasks.Task<bool> DeleteEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceHealthAlertChannel : MyHealth.ServiceReferenceHealth.IServiceHealthAlert, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceHealthAlertClient : System.ServiceModel.ClientBase<MyHealth.ServiceReferenceHealth.IServiceHealthAlert>, MyHealth.ServiceReferenceHealth.IServiceHealthAlert {
        
        public ServiceHealthAlertClient() {
        }
        
        public ServiceHealthAlertClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceHealthAlertClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHealthAlertClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHealthAlertClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertPatient(MyHealth.ServiceReferenceHealth.Patient patient) {
            return base.Channel.InsertPatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPatientAsync(MyHealth.ServiceReferenceHealth.Patient patient) {
            return base.Channel.InsertPatientAsync(patient);
        }
        
        public bool UpdatePatient(MyHealth.ServiceReferenceHealth.Patient patient, int sns) {
            return base.Channel.UpdatePatient(patient, sns);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(MyHealth.ServiceReferenceHealth.Patient patient, int sns) {
            return base.Channel.UpdatePatientAsync(patient, sns);
        }
        
        public bool UpdateStatePatient(MyHealth.ServiceReferenceHealth.Patient patient) {
            return base.Channel.UpdateStatePatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStatePatientAsync(MyHealth.ServiceReferenceHealth.Patient patient) {
            return base.Channel.UpdateStatePatientAsync(patient);
        }
        
        public MyHealth.ServiceReferenceHealth.Patient GetPatient(int sns) {
            return base.Channel.GetPatient(sns);
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.Patient> GetPatientAsync(int sns) {
            return base.Channel.GetPatientAsync(sns);
        }
        
        public MyHealth.ServiceReferenceHealth.Patient[] GetPatientList() {
            return base.Channel.GetPatientList();
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.Patient[]> GetPatientListAsync() {
            return base.Channel.GetPatientListAsync();
        }
        
        public MyHealth.ServiceReferenceHealth.HeartRate[] HeartRateList(int sns) {
            return base.Channel.HeartRateList(sns);
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.HeartRate[]> HeartRateListAsync(int sns) {
            return base.Channel.HeartRateListAsync(sns);
        }
        
        public MyHealth.ServiceReferenceHealth.OxygenSaturation[] OxygenSaturationList(int sns) {
            return base.Channel.OxygenSaturationList(sns);
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.OxygenSaturation[]> OxygenSaturationListAsync(int sns) {
            return base.Channel.OxygenSaturationListAsync(sns);
        }
        
        public MyHealth.ServiceReferenceHealth.BloodPressure[] BloodPressureList(int sns) {
            return base.Channel.BloodPressureList(sns);
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.BloodPressure[]> BloodPressureListAsync(int sns) {
            return base.Channel.BloodPressureListAsync(sns);
        }
        
        public MyHealth.ServiceReferenceHealth.AlertType GetAlert(string type) {
            return base.Channel.GetAlert(type);
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.AlertType> GetAlertAsync(string type) {
            return base.Channel.GetAlertAsync(type);
        }
        
        public MyHealth.ServiceReferenceHealth.AlertType[] GetAlertList() {
            return base.Channel.GetAlertList();
        }
        
        public System.Threading.Tasks.Task<MyHealth.ServiceReferenceHealth.AlertType[]> GetAlertListAsync() {
            return base.Channel.GetAlertListAsync();
        }
        
        public bool InsertAlert(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.InsertAlert(alertType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.InsertAlertAsync(alertType);
        }
        
        public bool UpdateAlert(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.UpdateAlert(alertType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.UpdateAlertAsync(alertType);
        }
        
        public bool DeleteAlert(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.DeleteAlert(alertType);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAlertAsync(MyHealth.ServiceReferenceHealth.AlertType alertType) {
            return base.Channel.DeleteAlertAsync(alertType);
        }
        
        public bool InsertEvent(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.InsertEvent(eventType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.InsertEventAsync(eventType);
        }
        
        public bool UpdateEvent(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.UpdateEvent(eventType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.UpdateEventAsync(eventType);
        }
        
        public bool DeleteEvent(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.DeleteEvent(eventType);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEventAsync(MyHealth.ServiceReferenceHealth.EventType eventType) {
            return base.Channel.DeleteEventAsync(eventType);
        }
    }
}
